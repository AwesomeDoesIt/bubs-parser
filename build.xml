<!-- $Id: build.xml 7582 2008-06-17 21:57:19Z chriso $ -->
<project name="shared-nlp-code" default="dist" basedir=".">

    <property name="dir.shared.base" location="../shared-nlp-code"/>
    
	<property name="dir.build" location="build" />
	<property name="dir.src" location="java/src" />
	<property name="dir.doc" location="doc" />
	<property name="dir.bsd.lib" location="java/bsd-lib" />
	<property name="dir.lgpl.lib" location="java/lgpl-lib" />
	<property name="dir.build.doc" location="build-doc" />

    <property name="dir.shared.build" location="${dir.shared.base}/build" />
    <property name="dir.shared.build.lib" location="${dir.shared.base}/build-lib" />
    <property name="dir.shared.bsd.lib" location="${dir.shared.base}/java/bsd-lib" />
    <property name="dir.shared.lgpl.lib" location="${dir.shared.base}/java/lgpl-lib" />

    <property name="dir.dist" location="build-dist" />

    <!-- Use ant-contrib, cpptasks, and genjar (from SourceForge) to enable try/catch, 
         gcc compilation, and better dependency analysis than classfileset -->
    <taskdef classpath="${dir.shared.build.lib}/ant-contrib-1.0b3.jar" resource="net/sf/antcontrib/antlib.xml" />
    <taskdef classpath="${dir.shared.build.lib}/cpptasks.jar" resource="cpptasks.tasks" />
    <taskdef classpath="${dir.shared.build.lib}/genjar.jar" resource="genjar.properties" />


	<path id="classpath.libs">
		<fileset dir="${dir.bsd.lib}" includes="*.jar" />
		<fileset dir="${dir.lgpl.lib}" includes="*.jar" />
	</path>

	<!--
    ========================================================================
        Clean the entire project
    ========================================================================
    -->
	<target name="clean" description="Clean the entire project">
		<delete dir="build" />
		<delete dir="build-dist" />
	</target>

	<!--
    ========================================================================
        Compile all Java code
    ========================================================================
    -->
	<target name="compile-java" description="Compile Java code and tools">
		<!-- If the build directory doesn't already exist, create it -->
		<mkdir dir="${dir.build}" />
		<javac srcdir="${dir.src}" includes="**/*.java" destdir="${dir.build}" debug="true">
			<classpath refid="classpath.libs" />
		</javac>
	</target>

	<!--
    ========================================================================
        Compile all native code
    ========================================================================
    -->
	<target name="compile-native" description="Compile native code and tools">
		<!-- If the build directory doesn't already exist, create it -->
		<mkdir dir="${dir.dist}" />

		<!-- TODO Update to recognize Windows vs Unix and find the right gcc path -->
		<cc name="gcc" outtype="executable" outfile="${dir.dist}/evalb" debug="true">
			<fileset dir="c/evalb" includes="*.c" />
		</cc>

		<delete dir="${dir.dist}" includes="*.o,dependencies.xml,history.xml" />
	</target>

	<!-- 
    ========================================================================
       Package documentation 
    ========================================================================
    -->
	<target name="doc">
		<javadoc destdir="${dir.build.doc}/javadoc">
			<fileset dir="${dir.src}" includes="**/*.java" excludes="**/Test*.java,**/Profile*.java,**/All*Tests.java,**/*TestCase.java" />
			<classpath refid="classpath.libs" />
		</javadoc>
		<copy todir="${dir.build.doc}">
			<fileset dir="${dir.doc}" excludes="package-template.html"/>
		</copy>
	</target>

	<!-- 
    ========================================================================
       Package an executable jar file and runner scripts for direct shell 
       usage and for submission to the Sun Grid Engine.
       
       Called by individual targets below
       
       Arguments:
         * root-class - Primary root classnam (required)
         * additional-root-classes - Additional root classnames, comma-delimited 
             (optional)
         * additional-libs (optional) List of any additional classes which 
             should also be considered as root classes
         * tool-name - string (required). The desired script name. The jar name 
             will match, with a .jar suffix, and the SGE script will be named
             by prepending 'grid-'
         * heap-size (optional - default=128) Size in megabytes
         * additional-libs (optional) List of any additional jars which should
             be included in their entirety
         * params (optional) Parameter list to pass to the grid engine script.
    ========================================================================
    -->
	<target name="package-tool" description="Package an executable jar file">
		<!-- Create the distribution directory if it doesn't already exist -->
		<mkdir dir="${dir.dist}" />

        <!-- Default unspecified parameters -->
        <property name="additional-libs" value="none" />
        <property name="additional-root-classes" value="" />
		<property name="params" value="" />

		<!-- If 'heap-size' is not specified, default it to 128m -->
		<property name="heap-size" value="128" />
	    
		<!-- Package the jar -->
		<genjar jarfile="${dir.dist}/${tool-name}.jar">
			<class name="${root-class}" />
            <classes names="${additional-root-classes}" />

			<classpath>
				<pathelement location="${dir.build}" />
                <pathelement location="${dir.shared.build}" />
				<fileset dir="${dir.bsd.lib}" includes="*.jar" />
                <fileset dir="${dir.shared.bsd.lib}" includes="*.jar" />
				<!-- TODO: LGPL jars probably shouldn't be packaged into standalone jar files -->
                <fileset dir="${dir.shared.lgpl.lib}" includes="*.jar" />
                <fileset dir="${dir.shared.build.lib}" includes="*.jar" />
			</classpath>

			<manifest>
				<attribute name="Main-Class" value="${root-class}" />
			</manifest>

			<!-- Include all args4j property files -->
			<zipfileset src="${dir.shared.bsd.lib}/args4j.jar" includes="**/*.properties" />
			<!-- And any additional jars specified by the caller -->
			<zipgroupfileset dir="." includes="${additional-libs}" />
		</genjar>

		<!-- Generate a runner script usable from Cygwin or from a true Unix shell -->
		<delete file="${dir.dist}/${tool-name}" />
		<copy file="${dir.shared.base}/java/tools/script-template.sh" tofile="${dir.dist}/${tool-name}" />
		<fixcrlf file="${dir.dist}/${tool-name}" eol="unix" />
		<replace file="${dir.dist}/${tool-name}">
			<replacefilter token="%JAR%" value="${tool-name}.jar" />
			<replacefilter token="%MEM%" value="${heap-size}" />
		</replace>
	    <!-- Make the script executable -->
		<chmod file="${dir.dist}/${tool-name}" perm="ug+x" />

		<!-- Generate a grid-engine runner script (submittable via qsub) -->
		<delete file="${dir.dist}/grid-${tool-name}" failonerror="false" />
		<copy file="${dir.shared.base}/java/tools/grid-script-template.sh" tofile="${dir.dist}/grid-${tool-name}" />
		<fixcrlf file="${dir.dist}/grid-${tool-name}" eol="unix" />
		<replace file="${dir.dist}/grid-${tool-name}">
            <replacefilter token="%NAME%" value="${tool-name}" />
            <replacefilter token="%ROOT-CLASS%" value="${root-class}" />
            <replacefilter token="%CP_JARS%" value="${cp-jars}" />
            <replacefilter token="%MEM%" value="${heap-size}" />
            <replacefilter token="%PARAMS%" value="${params}" />
		</replace>

	</target>

	<!-- 
    ========================================================================
       Targets to package various NLP executables 
    ========================================================================
    -->

	<target name="select-features" depends="compile-java" description="Package feature selection/formatting tool">
		<antcall target="package-tool">
			<param name="root-class" value="edu.ohsu.cslu.tools.SelectFeatures" />
			<param name="tool-name" value="select-features" />
		</antcall>
	</target>

	<target name="create-vector" depends="compile-java" description="Package vector creation tool">
		<antcall target="package-tool">
			<param name="root-class" value="edu.ohsu.cslu.alignment.tools.CreateVectorFromVocabulary" />
			<param name="tool-name" value="create-vector" />
		</antcall>
	</target>

	<target name="filter-sentences" depends="compile-java" description="Package Sentence Filtering Tool">
		<antcall target="package-tool">
			<param name="root-class" value="edu.ohsu.cslu.tools.FilterSentences" />
			<param name="tool-name" value="filter-sentences" />
			<param name="heap-size" value="256" />
		</antcall>
	</target>

	<target name="split-corpus" depends="compile-java" description="Package Training/Dev set split tool">
		<antcall target="package-tool">
			<param name="root-class" value="edu.ohsu.cslu.tools.SplitCorpus" />
			<param name="tool-name" value="split-corpus" />
			<param name="heap-size" value="256" />
		</antcall>
	</target>

	<target name="calculate-distances" depends="compile-java" description="Package Distance Calculation Tool">
		<antcall target="package-tool">
			<param name="root-class" value="edu.ohsu.cslu.tools.CalculateDistances" />
			<param name="tool-name" value="calculate-distances" />
			<param name="heap-size" value="512" />
		</antcall>
	</target>

	<target name="encode" depends="compile-java" description="Package Encoding Tool">
		<antcall target="package-tool">
			<param name="root-class" value="edu.ohsu.cslu.tools.Encode" />
			<param name="tool-name" value="encode" />
		</antcall>
	</target>

	<target name="induce-vocabularies" depends="compile-java" description="Package Vocabulary Induction Tool">
		<antcall target="package-tool">
			<param name="root-class" value="edu.ohsu.cslu.alignment.tools.InduceMappedVocabularies" />
			<param name="tool-name" value="induce-vocabularies" />
		</antcall>
	</target>

	<target name="align-sentences" depends="compile-java" description="Package Sentence MSA Tool">
		<antcall target="package-tool">
			<param name="root-class" value="edu.ohsu.cslu.alignment.tools.AlignSentences" />
			<param name="tool-name" value="align-sentences" />
			<param name="heap-size" value="512" />
		</antcall>
	</target>

	<target name="train-and-align" depends="compile-java" description="Package Full Sentence MSA Tool">
		<antcall target="package-tool">
			<param name="root-class" value="edu.ohsu.cslu.alignment.tools.TrainHmmAndAlignSequences" />
			<param name="tool-name" value="train-and-align" />
			<param name="heap-size" value="512" />
		</antcall>
	</target>

    <target name="summarize-grammar" depends="compile-java" description="Package grammar statistics tool">
        <antcall target="package-tool">
            <param name="root-class" value="edu.ohsu.cslu.grammar.SummarizeGrammar" />
            <param name="additional-root-classes" value="edu.ohsu.cslu.grammar.CsrSparseMatrixGrammar" />
            <param name="tool-name" value="summarize-grammar" />
            <param name="heap-size" value="1024" />
        </antcall>
    </target>

	<target name="parse" depends="compile-java" description="Package parser driver">
        <antcall target="package-tool">
            <param name="root-class" value="edu.ohsu.cslu.parser.ParserDriver" />
            <param name="tool-name" value="parse" />
            <param name="heap-size" value="1024" />
        </antcall>
    </target>

    <!-- 
    ========================================================================
       Package all NLP applications
    ========================================================================
    -->
    <!-- TODO: Re-add compile-native -->
	<target name="dist"
	        depends="filter-sentences,split-corpus,select-features,calculate-distances,encode,induce-vocabularies,align-sentences,train-and-align,create-vector,summarize-grammar,parse"
	        description="Package all NLP application">
	</target>

</project>
